// <auto-generated />
using System;
using HKCR.Infra.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HKCR.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HKCR.Domain.Entities.AddUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsStaff")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Profile")
                        .HasColumnType("text");

                    b.Property<string>("RoleUser")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7b03cfb-ddf6-47c5-877a-e1824963cb66",
                            DocId = new Guid("72eb3a74-5ff1-48b0-8b66-f08de1177332"),
                            Email = "admin@hajur.com",
                            EmailConfirmed = true,
                            IsStaff = false,
                            LockoutEnabled = false,
                            Name = "Admin BSDK",
                            NormalizedEmail = "ADMIN@HAJUR.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDAfZujuz3bJo7Y5k92sg3CttTK3/4ICZMudQ5L1jJN7cV9vqwDS0UcnNBJSsvgIXA==",
                            PhoneNumberConfirmed = false,
                            Profile = "/public/images/uploads/user.jpg",
                            RoleUser = "admin",
                            SecurityStamp = "b081699f-5e5e-41bb-a58c-09ed208385c6",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("HKCR.Domain.Entities.Cars", b =>
                {
                    b.Property<Guid>("CarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarAvailability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarBrand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarImage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CarLastRented")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CarNoOfRent")
                        .HasColumnType("integer");

                    b.Property<double?>("CarRentalRate")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.HasKey("CarID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.DamageRequest", b =>
                {
                    b.Property<Guid?>("DamageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DamageDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DamageDescription")
                        .HasColumnType("text");

                    b.Property<string>("DamageStatus")
                        .HasColumnType("text");

                    b.Property<string>("DamagedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("RentalId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RepairBill")
                        .HasColumnType("integer");

                    b.HasKey("DamageId");

                    b.HasIndex("AddUserId");

                    b.HasIndex("RentalId");

                    b.ToTable("DamageRequest");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("DocID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DocImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DocID");

                    b.ToTable("Document");

                    b.HasData(
                        new
                        {
                            DocID = new Guid("72eb3a74-5ff1-48b0-8b66-f08de1177332"),
                            DocImage = "Not Available",
                            DocType = "License"
                        });
                });

            modelBuilder.Entity("HKCR.Domain.Entities.Offers", b =>
                {
                    b.Property<Guid>("OfferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OfferAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfferName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfferType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OfferID");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("OfferID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentTotal")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RentalID")
                        .HasColumnType("uuid");

                    b.HasKey("PaymentID");

                    b.HasIndex("OfferID");

                    b.HasIndex("RentalID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.Rent", b =>
                {
                    b.Property<Guid>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DamageStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RentalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RentalId")
                        .HasColumnType("uuid");

                    b.Property<string>("RentalStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RentId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("RentalId");

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.RentalRequest", b =>
                {
                    b.Property<Guid?>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CarID")
                        .HasColumnType("uuid");

                    b.Property<string>("DamageStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RentalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RentalRequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RentalStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RentalId");

                    b.HasIndex("AddUserId");

                    b.HasIndex("CarID");

                    b.ToTable("Rental");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HKCR.Domain.Entities.AddUser", b =>
                {
                    b.HasOne("HKCR.Domain.Entities.Document", "Document")
                        .WithMany("AddUsers")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Document");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.DamageRequest", b =>
                {
                    b.HasOne("HKCR.Domain.Entities.AddUser", "AddUser")
                        .WithMany("DamageRequests")
                        .HasForeignKey("AddUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HKCR.Domain.Entities.RentalRequest", "RentalRequest")
                        .WithMany("DamageRequests")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AddUser");

                    b.Navigation("RentalRequest");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.Payment", b =>
                {
                    b.HasOne("HKCR.Domain.Entities.Offers", "Offers")
                        .WithMany()
                        .HasForeignKey("OfferID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("HKCR.Domain.Entities.RentalRequest", "RentalRequest")
                        .WithMany()
                        .HasForeignKey("RentalID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Offers");

                    b.Navigation("RentalRequest");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.Rent", b =>
                {
                    b.HasOne("HKCR.Domain.Entities.AddUser", "AddUser")
                        .WithMany("Rent")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("HKCR.Domain.Entities.RentalRequest", "RentalRequest")
                        .WithMany()
                        .HasForeignKey("RentalId");

                    b.Navigation("AddUser");

                    b.Navigation("RentalRequest");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.RentalRequest", b =>
                {
                    b.HasOne("HKCR.Domain.Entities.AddUser", "AddUser")
                        .WithMany("Rentals")
                        .HasForeignKey("AddUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("HKCR.Domain.Entities.Cars", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AddUser");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.User", b =>
                {
                    b.HasOne("HKCR.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocId");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HKCR.Domain.Entities.AddUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HKCR.Domain.Entities.AddUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HKCR.Domain.Entities.AddUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HKCR.Domain.Entities.AddUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HKCR.Domain.Entities.AddUser", b =>
                {
                    b.Navigation("DamageRequests");

                    b.Navigation("Rent");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.Cars", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.Document", b =>
                {
                    b.Navigation("AddUsers");
                });

            modelBuilder.Entity("HKCR.Domain.Entities.RentalRequest", b =>
                {
                    b.Navigation("DamageRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
